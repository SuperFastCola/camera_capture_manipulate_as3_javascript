package  {				import com.adobe.images.JPGEncoder;		import com.greensock.TweenLite;	import com.greensock.TimelineLite;	import com.greensock.easing.Bounce;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.GlowFilterPlugin;		import flash.net.FileReference;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.media.Camera;	import flash.utils.ByteArray;	import flash.events.Event;	import flash.net.URLVariables;	import flash.ui.Mouse;	import flash.media.Video;	import flash.filters.GlowFilter;	import flash.geom.Rectangle;	import flash.display.MovieClip;	import flash.geom.Matrix;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.utils.setTimeout;	import flash.events.StatusEvent;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequestHeader;	import flash.net.URLRequestMethod;	import flash.net.URLRequest;	import flash.net.FileFilter;	import flash.display.LoaderInfo;	import flash.display.Loader;	import flash.external.ExternalInterface;		import ExternalImage;		public class CameraCapture extends MovieClip{				var jpgEncoder:JPGEncoder;		var cam:Camera;		var userImage;		var imgBD:BitmapData;		var imgBitmap:Bitmap;		var file:FileReference;		var imgByteData:ByteArray;		var tf:TextField; 			var t:Timer;; 			var area:Object;		var holdermask:Shape;			var holder:MovieClip;		var holderfill:MovieClip;		var imageselected:MovieClip;		var currentDirection:String;						var banner:MovieClip;		var costume:MovieClip;		var costumeType:String;				var external:MovieClip;		var disguise:LoaderInfo;		var uploaded = null;		//var uploaded = "facebook_image.jpg";				//holds first sequence array		var sequence:TimelineLite;		var sequence1Clips:Array;				//holds all of the control clips		var controlClips:Array;		var counter:Countdown;				var countTimer;				//activate glow filter plugin		TweenPlugin.activate([GlowFilterPlugin]);				//go back to landing if no camera is available		var back_to_landing:Boolean = false;		//general glow filter		var butnGlow:GlowFilter;				//instructions bubble		var bubble:MovieClip;		var testing:Boolean = false;				//holds results variables		var resultVars:URLVariables		public function CameraCapture(){			jpgEncoder = new JPGEncoder(100);			file = new FileReference();						//text field attributes			tf = new TextField(); 			tf.x = 300; 			tf.autoSize = TextFieldAutoSize.LEFT;			area = new Object();			area.w = 402;			area.h = 515;						//coordinates for saving the image			area.save_w = 531;			area.save_h = 763;			area.save_originX = 79;			area.save_originY = 132;						area.originX = 147;			area.originY = 293;						holdermask = new Shape();			holderfill = new Wrapping();			holder = new MovieClip();						imageselected = new MovieClip();			controlClips = new Array();				//for testing - comment out when finished			if(testing){				startCamera();			}					}// end CameraCapture constructor class				public function startCamera(){			//http://www.beautifycode.com/webcam-flash-php-upload-to-server							addChild(tf)												//timer attributes for testing.				//t= new Timer(100); 				//event listeners for various objects				//t.addEventListener(TimerEvent.TIMER, timerHandler); 								butn_snapshot.addEventListener(MouseEvent.CLICK, countDown);				butn_startover.addEventListener(MouseEvent.CLICK, removeSnapshot);				butn_snapshot.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				butn_snapshot.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);				butn_startover.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				butn_startover.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);				butn_saveimage.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				butn_saveimage.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);					butn_saveimage.addEventListener(MouseEvent.CLICK, saveImageLocally);								butn_facebook.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				butn_facebook.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);					butn_facebook.addEventListener(MouseEvent.CLICK,shareOnFacebook);				butn_twitter.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				butn_twitter.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);					butn_twitter.addEventListener(MouseEvent.CLICK,shareOnTwitter);												holdermask.graphics.beginFill(0xFF0000);				holdermask.graphics.drawRect(0,0,area.w,area.h);				main_holder.addChild(holdermask);								banner = main_holder.getChildByName("banner_logo") as MovieClip;					main_holder.addChildAt(holder,main_holder.getChildIndex(banner));											holder.mask = holdermask;				holder.addEventListener(Event.ADDED,moveHolders);				//holder.addEventListener(MouseEvent.MOUSE_DOWN, onBgClick);				//holder.addEventListener(MouseEvent.MOUSE_UP, onBgRelease);								main_holder.addChildAt(imageselected,main_holder.getChildIndex(banner));				imageselected.addEventListener(Event.ADDED,resizeClip);				//imageselected.addEventListener(MouseEvent.MOUSE_DOWN, onBgClick);				//imageselected.addEventListener(MouseEvent.MOUSE_UP, onBgRelease);								//adds control clips to interface				controlClips.push(controls.butn_up);				controlClips.push(controls.butn_left);				controlClips.push(controls.butn_right);				controlClips.push(controls.butn_down);				controlClips.push(controls.butn_larger);				controlClips.push(controls.butn_smaller);				controlClips.push(controls.butn_clockwise);				controlClips.push(controls.butn_counterclockwise);												//adds move image functions				for(var g=0; g<controlClips.length; g++){					trace(controlClips[g].name);					controlClips[g].addEventListener(MouseEvent.MOUSE_DOWN, initializeDirectionMove);					controlClips[g].addEventListener(MouseEvent.MOUSE_UP, stopDirectionMove);					controlClips[g].addEventListener(MouseEvent.MOUSE_OVER, butnEffects);					controlClips[g].addEventListener(MouseEvent.MOUSE_OUT, butnEffects);				}								butn_saveimage.visible = false;				butn_startover.visible = false;				butn_facebook.visible = false;				butn_twitter.visible = false;												//push movie clips into array for processing				sequence1Clips = new Array();				sequence1Clips.push(new Array(main_holder,1,stage.width,0));				sequence1Clips.push(new Array(controls,.25,controls.x,0));				sequence1Clips.push(new Array(instructions,.25,instructions.x - instructions.width,1));				sequence1Clips.push(new Array(santa,.25,stage.width,1));				sequence1Clips.push(new Array(butn_snapshot,.5,butn_snapshot.x,0));							hideShowClips(sequence1Clips,false);								showHidePictureFrameParts(false);												if(stage.loaderInfo.parameters.externalimage != null){					uploaded = stage.loaderInfo.parameters.externalimage;					loadExternalImage(uploaded);				}				else{					initializeCamera();				}			}						private function showHidePictureFrameParts(finalImage:Boolean):void{								var hideFinal:Boolean = finalImage;				var hidePositioning:Boolean = !finalImage;								main_holder.getChildByName("elf_final").visible = hideFinal;				main_holder.getChildByName("frame_final").visible = hideFinal;				main_holder.getChildByName("logo_final").visible = hideFinal;									main_holder.getChildByName("elf_positioning").visible = hidePositioning;				main_holder.getChildByName("frame_positioning").visible = hidePositioning;				main_holder.getChildByName("logo_positioning").visible = hidePositioning;			}								private function hideShowClips(clipsequence,switcher){				//hide all movieclips				for(var i = 0; i< clipsequence.length; i++){					clipsequence[i][0].visible = switcher;				}			}									private function showItems(clipsequence){				sequence = new TimelineLite({onComplete:addBubble});								butn_saveimage.visible = false;				butn_startover.visible = false;				butn_facebook.visible = false;				butn_twitter.visible = false;								for(var i = 0; i< clipsequence.length; i++){					sequence.append(TweenLite.from(clipsequence[i][0],clipsequence[i][1], {x:clipsequence[i][2], alpha:clipsequence[i][3], onStart:function(clip){												  	clip.visible = true;												   }, onStartParams:[clipsequence[i][0]]}));				}							sequence.play();			}						//resizes image object added to stage			private function resizeClip(evt:Event):void{				var ct = evt.currentTarget as MovieClip;				ct.width = area.w;				ct.height= area.h;					ct.x = area.originX;				ct.y = area.originY;			}			private function moveHolders(e:Event){				holder.x = holdermask.x = area.originX;				holder.y = holdermask.y = area.originY;			}						//just click drag functions for image in video area			private function onBgClick(e:MouseEvent){				MovieClip(e.currentTarget).startDrag();			}						//just click drag functions for image in video area			private function onBgRelease(e:MouseEvent){				MovieClip(e.currentTarget).stopDrag();			}						private function butnEffects(e:MouseEvent){				var targ = e.currentTarget as SimpleButton;					switch(e.type){					case "mouseOver":					Mouse.cursor = "hand";					TweenLite.to(targ,.25,{alpha:.5});					break;										case "mouseOut":						Mouse.cursor = "arrow";						TweenLite.to(targ,.25,{alpha:1});					break;				}			}						//gets the user camera			private function initializeCamera():void{								if (Camera.names.length > 0) 				{ 					trace("User has at least one camera installed."); 					cam = Camera.getCamera(); // Get default camera. 				} 				else{					trace("User has no cameras installed.");					back_to_landing = true;					addBubble("An active Web Camera has not been detected. Please upload an image");													}								if(cam != null){ 					cam.addEventListener(StatusEvent.STATUS, statusHandler); 					userImage = new Video(); 					userImage.attachCamera(cam); 				} 						}						public function loadExternalImage(filename){										userImage = new MovieClip();					holder.addChild(holderfill);					holder.addChild(userImage);													var sizeArray = new Array(area.w,area.h);					external = new ExternalImage(filename,sizeArray);					userImage.addChild(external);					addParts();							}						// This event gets dispatched when the user clicks the "Allow" or "Deny" 			// button in the Flash Player Settings dialog box. 			private function statusHandler(event:StatusEvent):void 			{ 			   if(cam.muted){ 					trace("Unable to connect to active camera."); 					if(ExternalInterface.available){						ExternalInterface.call("showLandingFromSharePage","Click below to try uploading a photo if you do not wish to use your camera.");					}				} 				else 				{ 					// Resize userImageeo object to match camera settings and  					// add the userImageeo to the display list. 										cam.setMode(600, 450, 12, true);					//cam.setMode(280, 140, 12, true);					cam.setQuality(0,100);								userImage.width = cam.width*2; 					userImage.height = cam.height*2; 					userImage.smoothing = true;										/* for flipping of video image					var WIDTH:int=userImage.width;					var ma:Matrix=new Matrix();					ma.a=-3;					ma.d=3;					ma.tx= cam.width;					ma.ty= cam.height;					userImage.transform.matrix=ma;					*/										userImage.x = holder.width/2 - cam.width/2;					//userImage.y =  -(cam.height/3); for flipping of video image					userImage.y =  holder.height/2 - cam.height/2;										holder.addChild(holderfill);					//area.originX = userImage.x;					holder.addChild(userImage);					addParts();												} 				// Remove the status event listener. 				cam.removeEventListener(StatusEvent.STATUS, statusHandler); 			}// end statusHandler									private function timerHandler(event:TimerEvent):void{				tf.text = ""; 				tf.appendText("activityLevel: " + cam.activityLevel + "\n"); 				tf.appendText("bandwidth: " + cam.bandwidth + "\n"); 				tf.appendText("currentFPS: " + cam.currentFPS + "\n"); 				tf.appendText("fps: " + cam.fps + "\n"); 				tf.appendText("keyFrameInterval: " + cam.keyFrameInterval + "\n"); 				tf.appendText("loopback: " + cam.loopback + "\n"); 				tf.appendText("motionLevel: " + cam.motionLevel + "\n"); 				tf.appendText("motionTimeout: " + cam.motionTimeout + "\n"); 				tf.appendText("quality: " + cam.quality + "\n"); 			} // end timerHandler									private function countDown(event:MouseEvent){				if(uploaded==null){										counter = new Countdown();					addChild(counter);										//if bubble message still on stage - remove it					if(this.getChildByName("bubbleMessage")){						this.removeChild(bubble);					}									counter.addEventListener("takePhoto",createSnapshot);					TweenLite.from(counter,.25,{alpha:0});					counter.gotoAndPlay("startAni");				}				else{					snapShotFunctionality();				}			}						private function backToStart(){				var cover:WhiteCover = new WhiteCover();				addChild(cover);											var seq = new TimelineLite();				seq.append(TweenLite.from(cover,.25,{alpha:0}));				seq.append(TweenLite.to(cover,.25,{alpha:1, onStart:function(){											showHidePictureFrameParts(false);											butn_saveimage.visible = false;											butn_startover.visible = false;											butn_facebook.visible = false;											butn_twitter.visible = false;											butn_snapshot.visible = true;											hideShowClips(sequence1Clips,false);											gotoAndStop(1);											instructions.gotoAndStop(1);										}}));				seq.append(TweenLite.to(cover,.25,{alpha:0, onComplete:function(){											removeChild(cover);											main_holder.x = 129;											showItems(sequence1Clips);										}}));			}			 			 			 private function snapShotFunctionality(){				 var cover:WhiteCover = new WhiteCover();				addChild(cover);												var seq = new TimelineLite();				seq.append(TweenLite.from(cover,.25,{alpha:0}));				seq.append(TweenLite.to(cover,.25,{alpha:1, onComplete:function(){											gotoAndStop(2);											showHidePictureFrameParts(true);											instructions.gotoAndStop(2);											santa.visible = false;											controls.visible = false;											main_holder.x = 10;											butn_snapshot.visible = false;											butn_saveimage.visible = true;											butn_startover.visible = true;											butn_facebook.visible = true;											butn_twitter.visible = true;										}}));				seq.append(TweenLite.to(cover,.25,{alpha:0, onComplete:function(){											removeChild(cover);											removeChild(counter);										}}));													//imgBD = new BitmapData(userImage.width,userImage.height);				//imgBD.draw(userImage);				if(imgBitmap != null){					if(imageselected.contains(imgBitmap)){						imageselected.removeChild(imgBitmap);					}				}								imgBD  = new BitmapData(area.w,area.h,true);				//imgBD  = new BitmapData(stage.width,stage.height);				//matrix:Matrix = null, colorTransform:flash.geom:ColorTransform = null, blendMode:String = null, clipRect:Rectangle = null, smoothing:Boolean = false										//http://stackoverflow.com/questions/6519318/bitmapdata-draw-cliprect-not-working-as-expected								holder.mask = null;								var mat:Matrix = new Matrix();				mat.identity();				mat.tx = area.originX/2;				mat.ty = -(area.originY);																						imgBD.draw(holder, null, null, null,new Rectangle(0,0,area.w,area.h),true);				//imgBD.draw(holder, mat, null, null,rect,true);				//imgBD.draw(userImage, mat, null, null, new Rectangle(0,0,area.w,area.h),true);				//imgBD.draw(stage, mat, null, null, null,true);							imgByteData = jpgEncoder.encode(imgBD);				imgBitmap=new Bitmap(imgBD);				holder.mask = holdermask;			   	imageselected.addChild(imgBitmap);				sendImage(imgByteData);			 }			 			private function createSnapshot(evt:Event):void {				counter.removeEventListener("takePhoto",createSnapshot);				snapShotFunctionality();							}// end createSnapshot									private function saveImageLocally(e:MouseEvent){				//sendImage(imgByteData);				//file.browse(new Array(new FileFilter("Images (*.jpg, *.jpeg)", "*.jpg;*.jpeg")));											var imgBDSave:BitmapData  = new BitmapData(area.save_w,area.save_h,true);													var mat:Matrix = new Matrix();				mat.identity();				mat.tx = -(area.save_originX);				mat.ty = -(area.save_originY);								imgBDSave.draw(main_holder, mat, null, null,new Rectangle(0,0,area.save_w,area.save_h),true);							var imgByteDataSave:ByteArray = jpgEncoder.encode(imgBDSave);						file.save(imgByteDataSave, "happy_holidays.jpg");			}						private function addParts(){				costume = new Disguise();				costume.x = area.w/2 - costume.width/2;				costume.y = area.h/2 - costume.height/2;								butnGlow = new GlowFilter(0xFFFFFF,0,0,0,2);				costume.filters = [butnGlow];				costume.addEventListener(MouseEvent.MOUSE_OVER, function(evt:MouseEvent){										 Mouse.cursor = "hand";										 TweenLite.to(costume, .25, {glowFilter:{blurX:20, blurY:20, alpha:1}});										 });				costume.addEventListener(MouseEvent.MOUSE_OUT, function(evt:MouseEvent){										 Mouse.cursor = "arrow";										 TweenLite.to(costume, .25, {glowFilter:{blurX:0, blurY:0, alpha:0}});										 });				costume.addEventListener(MouseEvent.MOUSE_DOWN, onBgClick);				costume.addEventListener(MouseEvent.MOUSE_UP, onBgRelease);								if(stage.loaderInfo.parameters.costumeType != null){					switch(stage.loaderInfo.parameters.costumeType){						case "santa":							costume.gotoAndStop(3);						break;												case "elf":							costume.gotoAndStop(2);						break;												default:							costume.gotoAndStop(1);						break;					}				}								holder.addChild(costume);								showItems(sequence1Clips);							}// end addParts			 			private function removeSnapshot(event:MouseEvent):void {				backToStart();										if(imgBitmap!= null && imageselected.contains(imgBitmap)){						imageselected.removeChild(imgBitmap);				}			}// end removeSnapshot						//send image data to server			private function sendImage(imgdata:ByteArray):void {				var sendHeader:URLRequestHeader = new URLRequestHeader("Content-type","application/octet-stream");				var sendReq:URLRequest;								if(testing){					sendReq = new URLRequest("http://abcfamily25kgiveaway.com/createimage.php");				}				else{					sendReq = new URLRequest("createimage.php");				}								sendReq.requestHeaders.push(sendHeader);				sendReq.method = URLRequestMethod.POST;				sendReq.data = imgdata;								var sendLoader:URLLoader;				sendLoader = new URLLoader();				sendLoader.addEventListener(Event.COMPLETE, imageSentHandler);				sendLoader.load(sendReq);							}// end sendImage						private function imageSentHandler(event:Event):void {				var dataStr:String = event.currentTarget.data.toString();				resultVars = new URLVariables();				resultVars.decode(dataStr);			   							 //trace(resultVars.absoluteurl +  + resultVars.shorturl); 			}// end imageSentHandler									private function imageProperties(e:Event){								switch(e.currentTarget.currentDirection){					case "up":						userImage.y -= 5;					break;										case "down":						userImage.y += 5;					break;										case "left":						userImage.x -= 5;					break;										case "right":						userImage.x += 5;					break;										case "larger":											userImage.scaleX += .005;						userImage.scaleY += .005;					break;										case "smaller":						userImage.scaleX -= .005;						userImage.scaleY -= .005;					break;										case "clockwise":						userImage.rotation += .25;					break;										case "counterclockwise":						userImage.rotation -= .25;					break;									}			}// end imageProperties						private function initializeDirectionMove(evt:MouseEvent){				holder.currentDirection = String(evt.currentTarget.name).replace(/butn_/,"");					holder.addEventListener(Event.ENTER_FRAME, imageProperties);			}// end initializeDirectionMove						private function stopDirectionMove(evt:MouseEvent){				holder.removeEventListener(Event.ENTER_FRAME, imageProperties);			}// end						private function hideBubble(evt:MouseEvent){				if(!back_to_landing){					var targ = evt.currentTarget as SimpleButton;					targ.removeEventListener(MouseEvent.MOUSE_OVER, butnEffects);					targ.removeEventListener(MouseEvent.MOUSE_OUT, butnEffects);					targ.removeEventListener(MouseEvent.CLICK,hideBubble);									TweenLite.to(targ.parent,.25,{scaleX:0,scaleY:0,ease:Bounce.easeOut, onComplete:function(){								 removeChild(targ.parent);								 }});				}				else{					if(ExternalInterface.available){						ExternalInterface.call("backToLanding");					}				}			}						private function bubbleAdded(e:Event){				var targ = e.currentTarget as MovieClip;				var bubbleButn = MovieClip(targ).getChildByName("button_close");				bubbleButn.addEventListener(MouseEvent.MOUSE_OVER, butnEffects);				bubbleButn.addEventListener(MouseEvent.MOUSE_OUT, butnEffects);				bubbleButn.addEventListener(MouseEvent.CLICK,hideBubble);				TweenLite.to(targ,.5,{scaleX:1,scaleY:1,ease:Bounce.easeOut});			}						private function addBubble(alertMessage:String = null){				bubble = new Bubble();				bubble.name = "bubbleMessage";				bubble.x = 484;				bubble.y = 448;						bubble.scaleX = bubble.scaleY = 0;								if(alertMessage != null){					var btext = bubble.getChildByName("bubble_text") as TextField;					btext.text = alertMessage;				}								bubble.addEventListener(Event.ADDED_TO_STAGE, bubbleAdded);				addChild(bubble);			}						private function shareOnFacebook(evt:MouseEvent){				if(ExternalInterface.available){					//postToFeed(imageurl,bitlylink,fb_caption,fb_description)					ExternalInterface.call("postToFeed",resultVars.absoluteurl,resultVars.shorturl);				}			}						private function shareOnTwitter(evt:MouseEvent){				if(ExternalInterface.available){					//postToTwitter(text,bitlylink)					ExternalInterface.call("postToTwitterFromFlash","I just got seasonally-styled with the ABC Family 25 Days of Christmas Show Your Christmas Spirit app! You can, too.",resultVars.shorturl);				}			}							}// end class definition	}//end package